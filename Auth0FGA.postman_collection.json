{
	"info": {
		"_postman_id": "996c6edd-abae-42a7-b104-56a7ba74add9",
		"name": "Auth0FGA",
		"description": "**Fine Grained Authorization (FGA)** is Okta's [Fine-Grained Authorization](https://docs.fga.dev/intro/authorization-and-okta-fga#what-is-fine-grained-authorization-fga) at scale SaaS based on Google's [Zanzibar](https://docs.fga.dev/intro/authorization-and-okta-fga#what-is-zanzibar). It is currently under development. It is designed to make it easy for application builders to easily add fine-grained authorization to their apps. It offers an HTTP API and has SDKs for programming languages like Node.js/JavaScript and GoLang. More languages and also policy languages like Rego are planned for the future. It is optimized for reliability and low latency at a high scale. For latency and compliance reasons we’ll have environments per jurisdiction (e.g. US, EU, AU) and also global clusters for applications that have a global user base.\n\n[](https://play.fga.dev/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32869166"
	},
	"item": [
		{
			"name": "Authorization Models",
			"item": [
				{
					"name": "Return all authorization models for a particular store",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{apiHost}}/stores/{{store_id}}/authorization-models",
							"protocol": "https",
							"host": [
								"{{apiHost}}"
							],
							"path": [
								"stores",
								"{{store_id}}",
								"authorization-models"
							]
						},
						"description": "The ReadAuthorizationModels API will return all the authorization models for a certain store.  \nOkta FGA's response will contain an array of all authorization models, sorted in descending order of creation.\n\n## [Limits](https://docs.fga.dev/intro/dashboard#limitations)\n\n## Example\n\nAssume that a store's authorization model has been configured twice. To get all the authorization models that have been created in this store, call GET authorization-models. The API will return a response that looks like:\n\n``` json\n{\n  \"authorization_models\": [\n    {\n      \"id\": \"01G50QVV17PECNVAHX1GG4Y5NC\",\n      \"type_definitions\": [...]\n    },\n    {\n      \"id\": \"01G4ZW8F4A07AKQ8RHSVG9RW04\",\n      \"type_definitions\": [...]\n    },\n  ],\n  \"continuation_token\": \"eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==\"\n}\n\n ```\n\nIf there are no more authorization models available, the `continuation_token` field will be empty\n\n``` json\n{\n  \"authorization_models\": [\n    {\n      \"id\": \"01G50QVV17PECNVAHX1GG4Y5NC\",\n      \"type_definitions\": [...]\n    },\n    {\n      \"id\": \"01G4ZW8F4A07AKQ8RHSVG9RW04\",\n      \"type_definitions\": [...]\n    },\n  ],\n  \"continuation_token\": \"\"\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Return a particular version of authorization model",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{apiHost}}/stores/{{store_id}}/authorization-models/{{authorization_model_id}}",
							"protocol": "https",
							"host": [
								"{{apiHost}}"
							],
							"path": [
								"stores",
								"{{store_id}}",
								"authorization-models",
								"{{authorization_model_id}}"
							]
						},
						"description": "The ReadAuthorizationModel API returns an authorization model by its identifier.  \nThe response will return the authorization model for the particular version.\n\n## Example\n\nTo retrieve the authorization model with ID `01G5JAVJ41T49E9TT3SKVS7X1J` for the store, call the GET authorization-models by ID API with `01G5JAVJ41T49E9TT3SKVS7X1J` as the `id` path parameter. The API will return:\n\n``` json\n{\n  \"authorization_model\":{\n    \"id\":\"01G5JAVJ41T49E9TT3SKVS7X1J\",\n    \"type_definitions\":[\n      {\n        \"type\":\"user\"\n      },\n      {\n        \"type\":\"document\",\n        \"relations\":{\n          \"reader\":{\n            \"union\":{\n              \"child\":[\n                {\n                  \"this\":{}\n                },\n                {\n                  \"computedUserset\":{\n                    \"object\":\"\",\n                    \"relation\":\"writer\"\n                  }\n                }\n              ]\n            }\n          },\n          \"writer\":{\n            \"this\":{}\n          }\n        }\n      }\n    ]\n  }\n}\n\n ```\n\nIn the above example, there are 2 types (`user` and `document`). The `document` type has 2 relations (`writer` and `reader`)."
					},
					"response": []
				},
				{
					"name": "Create new authorization models",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{apiHost}}/stores/{{store_id}}/authorization-models",
							"protocol": "https",
							"host": [
								"{{apiHost}}"
							],
							"path": [
								"stores",
								"{{store_id}}",
								"authorization-models"
							]
						},
						"description": "The WriteAuthorizationModel API will add a new authorization model to a store.  \nEach item in the `type_definitions` array is a type definition as specified in the field `type_definition`.  \nThe response will return the authorization model's ID in the `id` field.\n\n## Example\n\nTo add an authorization model with `user` and `document` type definitions, call POST authorization-models API with the body:\n\n``` json\n{\n  \"type_definitions\":[\n    {\n      \"type\":\"user\"\n    },\n    {\n      \"type\":\"document\",\n      \"relations\":{\n        \"reader\":{\n          \"union\":{\n            \"child\":[\n              {\n                \"this\":{}\n              },\n              {\n                \"computedUserset\":{\n                  \"object\":\"\",\n                  \"relation\":\"writer\"\n                }\n              }\n            ]\n          }\n        },\n        \"writer\":{\n          \"this\":{}\n        }\n      }\n    }\n  ]\n}\n\n ```\n\nOkta FGA's response will include the version id for this authorization model, which will look like\n\n``` json\n{\"authorization_model_id\": \"01G50QVV17PECNVAHX1GG4Y5NC\"}\n\n ```"
					},
					"response": []
				}
			]
		},
		{
			"name": "Relationship Tuples",
			"item": [
				{
					"name": "Add or delete tuple from the store",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"writes\": {\n        \"tuple_keys\": [\n            {\n                \"user\": \"user:2\",\n                \"relation\": \"owner\",\n                \"object\": \"app:xyz\"\n            }\n        ]\n    },\n    \"authorization_model_id\": \"{{authorization_model_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{apiHost}}/stores/{{store_id}}/write",
							"protocol": "https",
							"host": [
								"{{apiHost}}"
							],
							"path": [
								"stores",
								"{{store_id}}",
								"write"
							]
						},
						"description": "The Write API will update the tuples for a certain store. Tuples and type definitions allow Okta FGA to determine whether a relationship exists between an object and an user.  \nIn the body, `writes` adds new tuples and `deletes` removes existing tuples. When deleting a tuple, any `condition` specified with it is ignored.  \nThe API is not idempotent: if, later on, you try to add the same tuple key (even if the `condition` is different), or if you try to delete a non-existing tuple, it will throw an error.  \nAn `authorization_model_id` may be specified in the body. If it is, it will be used to assert that each written tuple (not deleted) is valid for the model specified. If it is not specified, the latest authorization model ID will be used.\n\n## [Limits](https://docs.fga.dev/intro/dashboard#limitations)\n\n- Each write API call allows at most **40** tuples.\n- Each store has a limit of **50000** tuples.\n    \n\n## Example\n\n### Adding relationships\n\nTo add `user:anne` as a `writer` for `document:2021-budget`, call write API with the following\n\n``` json\n{\n  \"writes\": {\n    \"tuple_keys\": [\n      {\n        \"user\": \"user:anne\",\n        \"relation\": \"writer\",\n        \"object\": \"document:2021-budget\"\n      }\n    ]\n  },\n  \"authorization_model_id\": \"01G50QVV17PECNVAHX1GG4Y5NC\"\n}\n\n ```\n\n### Removing relationships\n\nTo remove `user:bob` as a `reader` for `document:2021-budget`, use the Write API with the following request body\n\n``` json\n{\n  \"deletes\": {\n    \"tuple_keys\": [\n      {\n        \"user\": \"user:bob\",\n        \"relation\": \"reader\",\n        \"object\": \"document:2021-budget\"\n      }\n    ]\n  }\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Get tuples from the store that matches a query , without following userset rewrite rules",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"tuple_key\": {\n    \"relation\": \"owner\",\n    \"object\": \"app:x\"\n  },\n  \"authorization_model_id\": \"{{authorization_model_id}}\",\n  \"page_size\": 50\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{apiHost}}/stores/{{store_id}}/read",
							"protocol": "https",
							"host": [
								"{{apiHost}}"
							],
							"path": [
								"stores",
								"{{store_id}}",
								"read"
							]
						},
						"description": "The Read API will return the tuples for a certain store that match a query filter specified in the body of the request.  \nThe API doesn't guarantee order by any field.  \nIt is different from the `/stores/{store_id}/expand` API in that it only returns relationship tuples that are stored in the system and satisfy the query.  \nIn the body:\n\n1. `tuple_key` is optional. If not specified, it will return all tuples in the store.\n2. `tuple_key.object` is mandatory if `tuple_key` is specified. It can be a full object (e.g., `type:object_id`) or type only (e.g., `type:`).\n3. `tuple_key.user` is mandatory in the case the `tuple_key.object` is a type only.\n4. `authorization_model_id` is optional. If specified, it will be used to assert that the input `tuple_key` is valid for the model specified. If not specified, the latest authorization model ID will be used.\n    \n\n## Examples\n\n### Query for all objects in a type definition\n\nTo query for all objects that `user:bob` has `reader` relationship in the document type definition, call read API with body of\n\n``` json\n{\n \"tuple_key\": {\n     \"user\": \"user:bob\",\n     \"relation\": \"reader\",\n     \"object\": \"document:\"\n  }\n}\n\n ```\n\nThe API will return tuples and an optional continuation token, something like\n\n``` json\n{\n  \"tuples\": [\n    {\n      \"key\": {\n        \"user\": \"user:bob\",\n        \"relation\": \"reader\",\n        \"object\": \"document:2021-budget\"\n      },\n      \"timestamp\": \"2021-10-06T15:32:11.128Z\"\n    }\n  ],\n  \"continuation_token\": \"eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==\"\n}\n\n ```\n\nThis means that `user:bob` has a `reader` relationship with 1 document `document:2021-budget`. Note that this API, unlike the List Objects API, does not evaluate the tuples in the store.  \nThe continuation token will be empty if there are no more tuples to query.\n\n### Query for all stored relationship tuples that have a particular relation and object\n\nTo query for all users that have `reader` relationship with `document:2021-budget`, call read API with body of\n\n``` json\n{\n  \"tuple_key\": {\n     \"object\": \"document:2021-budget\",\n     \"relation\": \"reader\"\n   }\n}\n\n ```\n\nThe API will return something like\n\n``` json\n{\n  \"tuples\": [\n    {\n      \"key\": {\n        \"user\": \"user:bob\",\n        \"relation\": \"reader\",\n        \"object\": \"document:2021-budget\"\n      },\n      \"timestamp\": \"2021-10-06T15:32:11.128Z\"\n    }\n  ],\n  \"continuation_token\": \"eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==\"\n}\n\n ```\n\nThis means that `document:2021-budget` has 1 `reader` (`user:bob`). Note that, even if the model said that all `writers` are also `readers`, the API will not return writers such as `user:anne` because it only returns tuples and does not evaluate them.\n\n### Query for all users with all relationships for a particular document\n\nTo query for all users that have any relationship with `document:2021-budget`, call read API with body of\n\n``` json\n{\n  \"tuple_key\": {\n      \"object\": \"document:2021-budget\"\n   }\n}\n\n ```\n\nThe API will return something like\n\n``` json\n{\n  \"tuples\": [\n    {\n      \"key\": {\n        \"user\": \"user:anne\",\n        \"relation\": \"writer\",\n        \"object\": \"document:2021-budget\"\n      },\n      \"timestamp\": \"2021-10-05T13:42:12.356Z\"\n    },\n    {\n      \"key\": {\n        \"user\": \"user:bob\",\n        \"relation\": \"reader\",\n        \"object\": \"document:2021-budget\"\n      },\n      \"timestamp\": \"2021-10-06T15:32:11.128Z\"\n    }\n  ],\n  \"continuation_token\": \"eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==\"\n}\n\n ```\n\nThis means that `document:2021-budget` has 1 `reader` (`user:bob`) and 1 `writer` (`user:anne`)."
					},
					"response": []
				},
				{
					"name": "Return a list of all the tuple changes",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{apiHost}}/stores/{{store_id}}/changes",
							"protocol": "https",
							"host": [
								"{{apiHost}}"
							],
							"path": [
								"stores",
								"{{store_id}}",
								"changes"
							]
						},
						"description": "The ReadChanges API will return a paginated list of tuple changes (additions and deletions) that occurred in a given store, sorted by ascending time. The response will include a continuation token that is used to get the next set of changes. If there are no changes after the provided continuation token, the same token will be returned in order for it to be used when new changes are recorded. If the store never had any tuples added or removed, this token will be empty.  \nYou can use the `type` parameter to only get the list of tuple changes that affect objects of that type.  \nWhen reading a write tuple change, if it was conditioned, the condition will be returned.  \nWhen reading a delete tuple change, the condition will NOT be returned regardless of whether it was originally conditioned or not.\n\n## [Limits](https://docs.fga.dev/intro/dashboard#limitations)\n\n- Each store has a limit of **10** requests per second (RPS)."
					},
					"response": []
				}
			]
		},
		{
			"name": "Assertions",
			"item": [
				{
					"name": "/stores/{store_id}/assertions/{authorization_model_id}",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{apiHost}}/stores/{{store_id}}}/assertions/:{{authorization_model_id}}",
							"protocol": "https",
							"host": [
								"{{apiHost}}"
							],
							"path": [
								"stores",
								"{{store_id}}}",
								"assertions",
								":{{authorization_model_id}}"
							],
							"variable": [
								{
									"key": "{{authorization_model_id}}",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Relationship Queries",
			"item": [
				{
					"name": "Get all objects of the given type that the user has a relation with",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "The ListObjects API returns a list of all the objects of the given type that the user has a relation with. To achieve this, both the store tuples and the authorization model are used.  \nAn `authorization_model_id` may be specified in the body. If it is not specified, the latest authorization model ID will be used. It is strongly recommended to specify authorization model id for better performance.  \nYou may also specify `contextual_tuples` that will be treated as regular tuples. Each of these tuples may have an associated `condition`.  \nYou may also provide a `context` object that will be used to evaluate the conditioned tuples in the system. It is strongly recommended to provide a value for all the input parameters of all the conditions, to ensure that all tuples be evaluated correctly.  \nThe response will contain the related objects in an array in the \"objects\" field of the response and they will be strings in the object format `:` (e.g. \"document:roadmap\").  \nThe number of objects in the response array will be at most 1000, and it will be limited by an execution timeout of 3 seconds, whichever is hit first.  \nThe objects given will not be sorted, and therefore two identical calls can give a given different set of objects.## Example  \nIn order to list the objects of type document that user `user:anne` has a `reader` relationship with, while passing the Anne is an editor of the marketing folder in the contextual tuples, You can issue a ListObjects API request that includes the contextual tuples:\n\n``` json\n{\n  \"authorization_model_id\": \"01G5JAVJ41T49E9TT3SKVS7X1J\",\n  \"user\": \"user:anne\",\n  \"relation\": \"reader\",\n  \"type\": \"document\"\n  \"contextual_tuples\": {\n    \"tuple_keys\": [\n      {\n        \"user\": \"user:anne\",\n        \"relation\": \"editor\",\n        \"object\": \"folder:marketing\"\n      }\n    ]\n  }\n}\n\n ```\n\nOkta FGA's response will be of the format: `{ \"objects\": [\"document:roadmap\"] }` and include document Anne is related to as reader"
					},
					"response": []
				},
				{
					"name": "Check whether a user is authorized to access an object",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "The Check API queries to check if the user has a certain relationship with an object in a certain store.  \nA `contextual_tuples` object may also be included in the body of the request. This object contains one field `tuple_keys`, which is an array of tuple keys. Each of these tuples may have an associated `condition`.  \nYou may also provide an `authorization_model_id` in the body. This will be used to assert that the input `tuple_key` is valid for the model specified. If not specified, the assertion will be made against the latest authorization model ID. It is strongly recommended to specify authorization model id for better performance.  \nYou may also provide a `context` object that will be used to evaluate the conditioned tuples in the system. It is strongly recommended to provide a value for all the input parameters of all the conditions, to ensure that all tuples be evaluated correctly.  \nThe response will return whether the relationship exists in the field `allowed`.\n\n## Example\n\nIn order to check if user `user:anne` of type `user` has a `reader` relationship with object `document:2021-budget` given the following contextual tuple\n\n``` json\n{\n  \"user\": \"user:anne\",\n  \"relation\": \"member\",\n  \"object\": \"time_slot:office_hours\"\n}\n\n ```\n\nthe Check API can be used with the following request body:\n\n``` json\n{\n  \"tuple_key\": {\n    \"user\": \"user:anne\",\n    \"relation\": \"reader\",\n    \"object\": \"document:2021-budget\"\n  },\n  \"contextual_tuples\": {\n    \"tuple_keys\": [\n      {\n        \"user\": \"user:anne\",\n        \"relation\": \"member\",\n        \"object\": \"time_slot:office_hours\"\n      }\n    ]\n  },\n  \"authorization_model_id\": \"01G50QVV17PECNVAHX1GG4Y5NC\"\n}\n\n ```\n\nOkta FGA's response will include `{ \"allowed\": true }` if there is a relationship and `{ \"allowed\": false }` if there isn't."
					},
					"response": []
				},
				{
					"name": "Expand all relationships in userset tree format, and following userset rewrite rules, useful to reason about and debug certain relationship",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "The Expand API will return all users and usersets that have certain relationship with an object in a certain store.  \nThis is different from the `/stores/{store_id}/read` API in that both users and computed usersets are returned.  \nBody parameters `tuple_key.object` and `tuple_key.relation` are all required.  \nThe response will return a tree whose leaves are the specific users and usersets. Union, intersection and difference operator are located in the intermediate nodes.\n\n## Example\n\nTo expand all users that have the `reader` relationship with object `document:2021-budget`, use the Expand API with the following request body\n\n``` json\n{\n  \"tuple_key\": {\n    \"object\": \"document:2021-budget\",\n    \"relation\": \"reader\"\n  },\n  \"authorization_model_id\": \"01G50QVV17PECNVAHX1GG4Y5NC\"\n}\n\n ```\n\nOkta FGA's response will be a userset tree of the users and computed usersets that have read access to the document.\n\n``` json\n{\n  \"tree\":{\n    \"root\":{\n      \"type\":\"document:2021-budget#reader\",\n      \"union\":{\n        \"nodes\":[\n          {\n            \"type\":\"document:2021-budget#reader\",\n            \"leaf\":{\n              \"users\":{\n                \"users\":[\n                  \"user:bob\"\n                ]\n              }\n            }\n          },\n          {\n            \"type\":\"document:2021-budget#reader\",\n            \"leaf\":{\n              \"computed\":{\n                \"userset\":\"document:2021-budget#writer\"\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n\n ```\n\nThe caller can then call expand API for the `writer` relationship for the `document:2021-budget`."
					},
					"response": []
				},
				{
					"name": "[Experimental] Streaming versioN of the ListObjects API",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "The Streamed ListObjects API is very similar to the the ListObjects API, with two differences:\n\n1. Instead of collecting all objects before returning a response, it streams them to the client as they are collected.\n    \n2. The number of results returned is only limited by an execution timeout of 3 seconds."
					},
					"response": []
				}
			]
		},
		{
			"name": "Client Credentials Flow",
			"item": [
				{
					"name": "Obtain Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store the access_token in an environment variable",
									"var accessToken = pm.response.json().access_token;",
									"pm.environment.set(\"access_token\", accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{FGA_CLIENT_ID}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{FGA_CLIENT_SECRET}}",
									"type": "text"
								},
								{
									"key": "audience",
									"value": "{{audience}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "{{grant_type}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://fga.us.auth0.com/oauth/token",
							"protocol": "https",
							"host": [
								"fga",
								"us",
								"auth0",
								"com"
							],
							"path": [
								"oauth",
								"token"
							]
						},
						"description": "### Auth0 Token Request\n\nThis endpoint allows you to obtain an access token from Auth0 by providing the required credentials.\n\n#### Request Body Parameters\n\n- `client_id` (text): The client ID associated with your application.\n- `client_secret` (text): The client secret associated with your application.\n- `audience` (text): The target audience for the token.\n- `grant_type` (text): The type of grant being requested.\n    \n\n#### Response\n\n- Status: 200\n- Content-Type: application/json\n    \n\nUpon a successful request, the response will include:\n\n- `access_token`: The obtained access token.\n- `scope`: The scope of the access token.\n- `expires_in`: The expiration time of the access token.\n- `token_type`: The type of token obtained.\n    \n\n[https://docs.fga.dev/integration/getting-your-api-keys](https://docs.fga.dev/integration/getting-your-api-keys)"
					},
					"response": []
				}
			]
		}
	]
}